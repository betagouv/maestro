/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);
// precacheAndRoute([
//   {
//     url: '/static/media/ressources.44d71a0011f3daf991cfe07ea6e98b14.svg',
//     revision: null,
//   },
// ]);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.REACT_APP_PUBLIC_URL + '/index.html')
);

registerRoute(
  ({ request, url }) =>
    url.origin === self.location.origin &&
    (request.destination === 'font' || request.destination === 'manifest'),
  new CacheFirst({
    cacheName: 'assets-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50, // Limite le nombre d'éléments dans le cache
        maxAgeSeconds: 30 * 24 * 60 * 60, // Cache pendant 30 jours
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200], // Met en cache uniquement les réponses réussies
      }),
    ],
  })
);

registerRoute(
  ({ request, url }) =>
    url.origin === self.location.origin &&
    (request.destination === 'style' ||
      request.destination === 'script' ||
      request.destination === 'image'),
  new NetworkFirst({
    cacheName: 'assets-offline-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50, // Limite le nombre d'éléments dans le cache
        maxAgeSeconds: 30 * 24 * 60 * 60, // Cache pendant 30 jours
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200], // Met en cache uniquement les réponses réussies
      }),
    ],
  })
);

registerRoute(
  ({ url, request }) =>
    request.method === 'GET' && url.pathname.startsWith('/api'),
  new NetworkFirst({
    cacheName: 'api-offline-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100, // Limite le nombre d'éléments dans le cache
        maxAgeSeconds: 5 * 24 * 60 * 60, // Cache pendant 5 jours
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200], // Met en cache uniquement les réponses réussies
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
