/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import { ColumnType, type Kysely } from 'kysely';
import { LaboratoryName } from 'maestro-shared/referential/Laboratory';
import { type Region } from 'maestro-shared/referential/Region';
import { SSD2Id } from 'maestro-shared/referential/Residue/SSD2Id';
import { AnalysisMethod } from 'maestro-shared/schema/Analysis/AnalysisMethod';
import { AnalysisStatus } from 'maestro-shared/schema/Analysis/AnalysisStatus';
import { PartialResidue } from 'maestro-shared/schema/Analysis/Residue/Residue';
import { ResidueCompliance } from 'maestro-shared/schema/Analysis/Residue/ResidueCompliance';
import { ResultKind } from 'maestro-shared/schema/Analysis/Residue/ResultKind';
import { type DocumentKind } from 'maestro-shared/schema/Document/DocumentKind';
import { ProgrammingPlanKind } from 'maestro-shared/schema/ProgrammingPlan/ProgrammingPlanKind';
import { UserRole } from 'maestro-shared/schema/User/UserRole';
import { MaestroDate } from 'maestro-shared/utils/date';

export type Generated<T> =
  T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S, I | undefined, U>
    : ColumnType<T, T | undefined, T>;

export type Point = {
  x: number;
  y: number;
};

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Analysis {
  compliance: boolean | null;
  createdAt: Generated<Timestamp | null>;
  createdBy: string | null;
  id: Generated<string>;
  notesOnCompliance: string | null;
  reportDocumentId: string | null;
  sampleId: string | null;
  status: AnalysisStatus;
}

export interface AnalysisResidues {
  analysisId: string;
  analysisMethod: AnalysisMethod;
  compliance: ResidueCompliance | null;
  lmr: number | null;
  notesOnPollutionRisk: string | null;
  notesOnResult: string | null;
  pollutionRisk: string | null;
  reference: SSD2Id | null;
  residueNumber: number;
  result: number | null;
  resultHigherThanArfd: string | null;
  resultKind: ColumnType<
    ResultKind,
    ResultKind | 'ND',
    ResultKind | 'ND'
  > | null;
  substanceApproved: string | null;
  substanceAuthorised: string | null;
  unknown_label: string | null;
  analysisDate: MaestroDate | null;
}

export interface AnalysisErrors {
  analysisId: string;
  residues: {
    old: Omit<PartialResidue, 'analysisId'>[];
    new: Omit<PartialResidue, 'analysisId'>[];
  };
}

export interface Companies {
  address: string | null;
  city: string | null;
  nafCode: string | null;
  name: string;
  postalCode: string | null;
  siret: string;
  tradeName: string | null;
}

export interface Documents {
  createdAt: Generated<Timestamp | null>;
  createdBy: string | null;
  filename: string;
  id: Generated<string>;
  kind: DocumentKind;
}

export interface KnexMigrations {
  batch: number | null;
  id: Generated<number>;
  migrationTime: Timestamp | null;
  name: string | null;
}

export interface Laboratories {
  emails: string[];
  id: Generated<string>;
  name: LaboratoryName;
  emailsAnalysisResult: string[];
}

export interface Prescriptions {
  context: string | null;
  id: Generated<string>;
  matrix: string | null;
  notes: string | null;
  programmingPlanId: string | null;
  stages: string[] | null;
}

export interface PrescriptionSubstances {
  analysisMethod: string;
  prescriptionId: string;
  substance: string;
}

export interface ProgrammingPlans {
  createdAt: Generated<Timestamp | null>;
  createdBy: string | null;
  id: Generated<string>;
  status: string;
  statusDrom: string | null;
  year: number;
}

export interface RegionalPrescriptionComments {
  comment: string;
  createdAt: Generated<Timestamp | null>;
  createdBy: string;
  id: Generated<string>;
  prescriptionId: string;
  region: string;
}

export interface RegionalPrescriptions {
  laboratoryId: string | null;
  prescriptionId: string;
  region: string;
  sampleCount: number | null;
}

export interface ResidueAnalytes {
  analysisId: string;
  analyteNumber: number;
  reference: SSD2Id | null;
  residueNumber: number;
  result: number | null;
  resultKind: ColumnType<
    ResultKind,
    ResultKind | 'ND',
    ResultKind | 'ND'
  > | null;
}

export interface SampleItems {
  compliance200263: boolean | null;
  itemNumber: number;
  ownerEmail: string | null;
  ownerFirstName: string | null;
  ownerLastName: string | null;
  quantity: number | null;
  quantityUnit: string | null;
  recipientKind: string | null;
  sampleId: string;
  sealId: string | null;
  supportDocumentId: string | null;
}

export interface Samples {
  companyOffline: string | null;
  companySiret: string | null;
  context: string;
  createdAt: Generated<Timestamp | null>;
  cultureKind: string | null;
  department: string | null;
  geolocation: Point | null;
  id: Generated<string>;
  laboratoryId: string | null;
  lastUpdatedAt: Generated<Timestamp | null>;
  legalContext: string;
  matrix: string | null;
  matrixDetails: string | null;
  matrixPart: string | null;
  notesOnAdmissibility: string | null;
  notesOnCreation: string | null;
  notesOnItems: string | null;
  notesOnMatrix: string | null;
  parcel: string | null;
  prescriptionId: string | null;
  programmingPlanId: string | null;
  receivedAt: Timestamp | null;
  reference: string;
  region: string;
  releaseControl: boolean | null;
  resytalId: string | null;
  sampledAt: Timestamp;
  sampledBy: string | null;
  sentAt: Timestamp | null;
  stage: string | null;
  status: string;
}

export interface SampleSequenceNumbers {
  nextSequence: Generated<number>;
  programmingPlanYear: number;
  region: string;
}

export interface Users {
  email: string;
  firstName: string;
  id: Generated<string>;
  lastName: string;
  region: Region | null;
  role: UserRole;
  loggedSecrets: ColumnType<string[], string[] | null, string[]>;
  programmingPlanKinds: ProgrammingPlanKind[];
}

export interface SampleDocuments {
  documentId: string;
  sampleId: string;
}

export interface Departments {
  id: string;
  geometry: ColumnType<never, unknown, unknown>;
}

export interface DB {
  analysis: Analysis;
  analysisResidues: AnalysisResidues;
  analysisErrors: AnalysisErrors;
  companies: Companies;
  departments: Departments;
  documents: Documents;
  knexMigrations: KnexMigrations;
  laboratories: Laboratories;
  prescriptions: Prescriptions;
  prescriptionSubstances: PrescriptionSubstances;
  programmingPlans: ProgrammingPlans;
  regionalPrescriptionComments: RegionalPrescriptionComments;
  regionalPrescriptions: RegionalPrescriptions;
  residueAnalytes: ResidueAnalytes;
  sampleDocuments: SampleDocuments;
  sampleItems: SampleItems;
  samples: Samples;
  sampleSequenceNumbers: SampleSequenceNumbers;
  users: Users;
}
export type KyselyMaestro = Kysely<DB>;
